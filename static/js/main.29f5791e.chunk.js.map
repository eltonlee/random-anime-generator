{"version":3,"sources":["components/CenterLogo.js","components/LoadingEffect.js","components/button.js","components/Title.js","components/AnimeImage.js","components/InfoBar.js","App.js","index.js"],"names":["CenterLogo","className","LoadingEffect","type","color","height","width","Button","props","onClick","func","Title","name","AnimeImage","src","alt","InfoBar","Fragment","airing","toString","score","numEp","App","useState","anime","SetAnime","info","SetInfo","loaded","SetLoaded","isClicked","SetClick","getAnime","a","fetch","then","res","json","temp","useEffect","getInfo","search_anime","temp2","e","current_anime2","rng","Math","random","floor","GenerateRandom","results","title","image_url","episodes","href","url","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oPAEe,SAASA,IACpB,OACI,qBAAKC,UAAU,aAAf,SACI,2D,oBCGGC,EALO,SAAC,GAAD,EAAGC,KAAH,IAASC,EAAT,EAASA,MAAT,OAErB,cAAC,IAAD,CAAcH,UAAU,gBAAgBE,KAAM,OAAQC,MAAOA,EAAOC,OAAQ,MAAOC,MAAO,SCH5E,SAASC,EAAOC,GAC3B,OACI,qBAAKP,UAAU,MAAf,SACI,wBACIA,UAAU,MACVQ,QAASD,EAAME,KAFnB,yBCHG,SAASC,EAAMH,GAC1B,OACI,8BACI,oBACIP,UAAU,QADd,SAEI,4BAAIO,EAAMI,WCLX,SAASC,EAAWL,GAC/B,OACI,qBAAKP,UAAU,aAAf,SACI,qBAAKa,IAAKN,EAAMI,KAAMG,IAAI,OCHvB,SAASC,EAAQR,GAC5B,OACI,cAAC,IAAMS,SAAP,UAEA,sBAAKhB,UAAU,YAAf,UAEI,sBAAKA,UAAU,aAAf,wBAEKO,EAAMU,OAAOC,cAGlB,sBAAKlB,UAAU,eAAf,4BAEKO,EAAMY,SAGX,sBAAKnB,UAAU,iBAAf,0BAEKO,EAAMa,cC+DRC,MAtEf,WAEE,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAAwBF,mBAAS,IAAjC,mBAAOG,EAAP,KAAaC,EAAb,KACA,EAA4BJ,oBAAS,GAArC,mBAAOK,EAAP,KAAeC,EAAf,KACA,EAA8BN,oBAAS,GAAvC,mBAAOO,EAAP,KAAkBC,EAAlB,KAUMC,EAAQ,uCAAG,4BAAAC,EAAA,sEACIC,MAAM,oDACtBC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAFJ,OACTC,EADS,OAIfb,EAASa,GAJM,2CAAH,qDAOdC,qBAAU,WACRP,MACC,IAGH,IAAMQ,EAAO,uCAAG,WAAOC,GAAP,eAAAR,EAAA,sEACMC,MAAM,2CAAD,OAA4CO,EAA5C,qCACtBN,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAFL,OACRK,EADQ,OAIdf,EAAQe,GACRb,GAAU,GALI,2CAAH,sDAeb,OACE,eAAC,IAAMZ,SAAP,WACA,cAACjB,EAAD,IACA,cAACO,EAAD,CAAQG,KAVV,SAAsBiC,GACpBZ,GAAS,GACTF,GAAU,GACV,IAAIe,EA9BN,WACE,IAAIC,EAAuB,IAAjBC,KAAKC,SAGf,OAFAF,EAAMC,KAAKE,MAAMH,GACKrB,EAAMqB,GA2BPI,GACrBT,EAAQI,MAQPd,EACCF,EACE,gCACE,cAACjB,EAAD,CAAOC,KAAMc,EAAKwB,QAAQ,GAAGC,QAC7B,cAACtC,EAAD,CAAYD,KAAMc,EAAKwB,QAAQ,GAAGE,YAClC,cAACpC,EAAD,CAASI,MAAOM,EAAKwB,QAAQ,GAAG9B,MAAOF,OAAQQ,EAAKwB,QAAQ,GAAGhC,OAAQG,MAASK,EAAKwB,QAAQ,GAAGG,WAChG,mBAAGC,KAAM5B,EAAKwB,QAAQ,GAAGK,IAAzB,SAA8B,wBAAQtD,UAAU,MAAlB,gCAG7B,cAAC,EAAD,IAEL,qBAAKA,UAAU,MAAf,SACE,qBAAKa,IAAI,6DAA4DC,IAAI,GAAGT,MAAM,cCnE1FkD,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAGFC,SAASC,eAAe,W","file":"static/js/main.29f5791e.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default function CenterLogo() {\r\n    return (\r\n        <div className='centerlogo'>\r\n            <h1>Random Anime Generator </h1> \r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport ReactLoading from 'react-loading';\r\n\r\nconst LoadingEffect = ({ type, color }) => (\r\n\r\n\t<ReactLoading className='LoadingEffect' type={'spin'} color={color} height={'10%'} width={'10%'} />\r\n);\r\n\r\nexport default LoadingEffect;","import React from 'react'\r\n\r\nexport default function Button(props) {\r\n    return (\r\n        <div className='btn'>\r\n            <button \r\n                className='btn'\r\n                onClick={props.func}\r\n                >Randomize\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Title(props) {\r\n    return (\r\n        <div>\r\n            <h1\r\n                className='title'>\r\n                <u>{props.name}</u>\r\n            </h1>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function AnimeImage(props) {\r\n    return (\r\n        <div className='AnimeImage'>\r\n            <img src={props.name} alt=\"\" />\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function InfoBar(props) {\r\n    return (\r\n        <React.Fragment>\r\n\r\n        <div className='container'>\r\n\r\n            <div className='InfoBarAir'>\r\n                Airing:&nbsp;\r\n                {props.airing.toString()}\r\n            </div>\r\n\r\n            <div className='InfoBarScore'>\r\n                Avg. Score:&nbsp; \r\n                {props.score}\r\n            </div>\r\n\r\n            <div className='InfoBarEpisode'>\r\n                Episodes:&nbsp;\r\n                {props.numEp}\r\n            </div>\r\n            \r\n        </div>\r\n\r\n        </React.Fragment >\r\n    )\r\n}\r\n","import React from 'react';\nimport { useState, useEffect} from 'react';\nimport './index.css'\nimport CenterLogo from './components/CenterLogo';\nimport LoadingEffect from './components/LoadingEffect';\nimport Button from './components/button';\nimport Title from './components/Title';\nimport AnimeImage from './components/AnimeImage';\nimport InfoBar from './components/InfoBar';\n\n\n\n\nfunction App() {\n\n  const [anime, SetAnime] = useState([]);\n  const [info, SetInfo] = useState([]);\n  const [loaded, SetLoaded] = useState(false);\n  const [isClicked, SetClick] = useState(false);\n\n  //Get a random number between 0 and 795 and return a random anime.\n  function GenerateRandom(){\n    var rng = Math.random() * (795);\n    rng = Math.floor(rng);\n    const current_anime = anime[rng];\n    return current_anime;\n  }\n\n  const getAnime = async () => {\n    const temp = await fetch('https://animechan.vercel.app/api/available/anime')\n      .then(res => res.json());\n    \n    SetAnime(temp);\n  }\n\n  useEffect(() => {\n    getAnime();\n  }, [])\n\n  //When passing a string into the URL, use backquotes not single quotes.\n  const getInfo = async (search_anime) => {\n    const temp2 = await fetch(`https://api.jikan.moe/v3/search/anime?q=${search_anime}&order_by=title&sort=asc&limit=1`)\n      .then(res => res.json());\n    \n    SetInfo(temp2);\n    SetLoaded(true);\n  }\n  //Randomize Button\n  function handleRandom(e){\n    SetClick(true);\n    SetLoaded(false)\n    var current_anime2 = GenerateRandom();\n    getInfo(current_anime2);\n  }\n\n  return (\n    <React.Fragment>\n    <CenterLogo />\n    <Button func={handleRandom}/>\n\n    {isClicked ? (\n      loaded ? (\n        <div>\n          <Title name={info.results[0].title}/>\n          <AnimeImage name={info.results[0].image_url} />\n          <InfoBar score={info.results[0].score} airing={info.results[0].airing} numEp = {info.results[0].episodes}/>\n          <a href={info.results[0].url}><button className='btn'>For more info</button></a>\n        </div>\n\n      ) : (<LoadingEffect/>)\n    ) : (\n      <div className='Gif'>\n        <img src=\"https://media.giphy.com/media/GkD4U3VfiIbzcBhQNu/giphy.gif\"alt='' width='30%'/>\n      </div>\n       \n    )}\n    \n\n    </React.Fragment>\n    \n  )\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n    \n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}